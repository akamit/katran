# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import katran_pb2 as katran__pb2


class KatranServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.changeMac = channel.unary_unary(
                '/lb.katran.KatranService/changeMac',
                request_serializer=katran__pb2.Mac.SerializeToString,
                response_deserializer=katran__pb2.Bool.FromString,
                )
        self.getMac = channel.unary_unary(
                '/lb.katran.KatranService/getMac',
                request_serializer=katran__pb2.Empty.SerializeToString,
                response_deserializer=katran__pb2.Mac.FromString,
                )
        self.addVip = channel.unary_unary(
                '/lb.katran.KatranService/addVip',
                request_serializer=katran__pb2.VipMeta.SerializeToString,
                response_deserializer=katran__pb2.Bool.FromString,
                )
        self.delVip = channel.unary_unary(
                '/lb.katran.KatranService/delVip',
                request_serializer=katran__pb2.Vip.SerializeToString,
                response_deserializer=katran__pb2.Bool.FromString,
                )
        self.getAllVips = channel.unary_unary(
                '/lb.katran.KatranService/getAllVips',
                request_serializer=katran__pb2.Empty.SerializeToString,
                response_deserializer=katran__pb2.Vips.FromString,
                )
        self.modifyVip = channel.unary_unary(
                '/lb.katran.KatranService/modifyVip',
                request_serializer=katran__pb2.VipMeta.SerializeToString,
                response_deserializer=katran__pb2.Bool.FromString,
                )
        self.modifyReal = channel.unary_unary(
                '/lb.katran.KatranService/modifyReal',
                request_serializer=katran__pb2.RealMeta.SerializeToString,
                response_deserializer=katran__pb2.Bool.FromString,
                )
        self.getVipFlags = channel.unary_unary(
                '/lb.katran.KatranService/getVipFlags',
                request_serializer=katran__pb2.Vip.SerializeToString,
                response_deserializer=katran__pb2.Flags.FromString,
                )
        self.getRealFlags = channel.unary_unary(
                '/lb.katran.KatranService/getRealFlags',
                request_serializer=katran__pb2.Real.SerializeToString,
                response_deserializer=katran__pb2.Flags.FromString,
                )
        self.addRealForVip = channel.unary_unary(
                '/lb.katran.KatranService/addRealForVip',
                request_serializer=katran__pb2.realForVip.SerializeToString,
                response_deserializer=katran__pb2.Bool.FromString,
                )
        self.delRealForVip = channel.unary_unary(
                '/lb.katran.KatranService/delRealForVip',
                request_serializer=katran__pb2.realForVip.SerializeToString,
                response_deserializer=katran__pb2.Bool.FromString,
                )
        self.modifyRealsForVip = channel.unary_unary(
                '/lb.katran.KatranService/modifyRealsForVip',
                request_serializer=katran__pb2.modifiedRealsForVip.SerializeToString,
                response_deserializer=katran__pb2.Bool.FromString,
                )
        self.getRealsForVip = channel.unary_unary(
                '/lb.katran.KatranService/getRealsForVip',
                request_serializer=katran__pb2.Vip.SerializeToString,
                response_deserializer=katran__pb2.Reals.FromString,
                )
        self.modifyQuicRealsMapping = channel.unary_unary(
                '/lb.katran.KatranService/modifyQuicRealsMapping',
                request_serializer=katran__pb2.modifiedQuicReals.SerializeToString,
                response_deserializer=katran__pb2.Bool.FromString,
                )
        self.getQuicRealsMapping = channel.unary_unary(
                '/lb.katran.KatranService/getQuicRealsMapping',
                request_serializer=katran__pb2.Empty.SerializeToString,
                response_deserializer=katran__pb2.QuicReals.FromString,
                )
        self.getStatsForVip = channel.unary_unary(
                '/lb.katran.KatranService/getStatsForVip',
                request_serializer=katran__pb2.Vip.SerializeToString,
                response_deserializer=katran__pb2.Stats.FromString,
                )
        self.getLruStats = channel.unary_unary(
                '/lb.katran.KatranService/getLruStats',
                request_serializer=katran__pb2.Empty.SerializeToString,
                response_deserializer=katran__pb2.Stats.FromString,
                )
        self.getLruMissStats = channel.unary_unary(
                '/lb.katran.KatranService/getLruMissStats',
                request_serializer=katran__pb2.Empty.SerializeToString,
                response_deserializer=katran__pb2.Stats.FromString,
                )
        self.getLruFallbackStats = channel.unary_unary(
                '/lb.katran.KatranService/getLruFallbackStats',
                request_serializer=katran__pb2.Empty.SerializeToString,
                response_deserializer=katran__pb2.Stats.FromString,
                )
        self.getIcmpTooBigStats = channel.unary_unary(
                '/lb.katran.KatranService/getIcmpTooBigStats',
                request_serializer=katran__pb2.Empty.SerializeToString,
                response_deserializer=katran__pb2.Stats.FromString,
                )
        self.addHealthcheckerDst = channel.unary_unary(
                '/lb.katran.KatranService/addHealthcheckerDst',
                request_serializer=katran__pb2.Healthcheck.SerializeToString,
                response_deserializer=katran__pb2.Bool.FromString,
                )
        self.delHealthcheckerDst = channel.unary_unary(
                '/lb.katran.KatranService/delHealthcheckerDst',
                request_serializer=katran__pb2.Somark.SerializeToString,
                response_deserializer=katran__pb2.Bool.FromString,
                )
        self.getHealthcheckersDst = channel.unary_unary(
                '/lb.katran.KatranService/getHealthcheckersDst',
                request_serializer=katran__pb2.Empty.SerializeToString,
                response_deserializer=katran__pb2.hcMap.FromString,
                )


class KatranServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def changeMac(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMac(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addVip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delVip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllVips(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def modifyVip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def modifyReal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getVipFlags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRealFlags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addRealForVip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delRealForVip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def modifyRealsForVip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRealsForVip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def modifyQuicRealsMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getQuicRealsMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStatsForVip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLruStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLruMissStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLruFallbackStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getIcmpTooBigStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addHealthcheckerDst(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delHealthcheckerDst(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getHealthcheckersDst(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KatranServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'changeMac': grpc.unary_unary_rpc_method_handler(
                    servicer.changeMac,
                    request_deserializer=katran__pb2.Mac.FromString,
                    response_serializer=katran__pb2.Bool.SerializeToString,
            ),
            'getMac': grpc.unary_unary_rpc_method_handler(
                    servicer.getMac,
                    request_deserializer=katran__pb2.Empty.FromString,
                    response_serializer=katran__pb2.Mac.SerializeToString,
            ),
            'addVip': grpc.unary_unary_rpc_method_handler(
                    servicer.addVip,
                    request_deserializer=katran__pb2.VipMeta.FromString,
                    response_serializer=katran__pb2.Bool.SerializeToString,
            ),
            'delVip': grpc.unary_unary_rpc_method_handler(
                    servicer.delVip,
                    request_deserializer=katran__pb2.Vip.FromString,
                    response_serializer=katran__pb2.Bool.SerializeToString,
            ),
            'getAllVips': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllVips,
                    request_deserializer=katran__pb2.Empty.FromString,
                    response_serializer=katran__pb2.Vips.SerializeToString,
            ),
            'modifyVip': grpc.unary_unary_rpc_method_handler(
                    servicer.modifyVip,
                    request_deserializer=katran__pb2.VipMeta.FromString,
                    response_serializer=katran__pb2.Bool.SerializeToString,
            ),
            'modifyReal': grpc.unary_unary_rpc_method_handler(
                    servicer.modifyReal,
                    request_deserializer=katran__pb2.RealMeta.FromString,
                    response_serializer=katran__pb2.Bool.SerializeToString,
            ),
            'getVipFlags': grpc.unary_unary_rpc_method_handler(
                    servicer.getVipFlags,
                    request_deserializer=katran__pb2.Vip.FromString,
                    response_serializer=katran__pb2.Flags.SerializeToString,
            ),
            'getRealFlags': grpc.unary_unary_rpc_method_handler(
                    servicer.getRealFlags,
                    request_deserializer=katran__pb2.Real.FromString,
                    response_serializer=katran__pb2.Flags.SerializeToString,
            ),
            'addRealForVip': grpc.unary_unary_rpc_method_handler(
                    servicer.addRealForVip,
                    request_deserializer=katran__pb2.realForVip.FromString,
                    response_serializer=katran__pb2.Bool.SerializeToString,
            ),
            'delRealForVip': grpc.unary_unary_rpc_method_handler(
                    servicer.delRealForVip,
                    request_deserializer=katran__pb2.realForVip.FromString,
                    response_serializer=katran__pb2.Bool.SerializeToString,
            ),
            'modifyRealsForVip': grpc.unary_unary_rpc_method_handler(
                    servicer.modifyRealsForVip,
                    request_deserializer=katran__pb2.modifiedRealsForVip.FromString,
                    response_serializer=katran__pb2.Bool.SerializeToString,
            ),
            'getRealsForVip': grpc.unary_unary_rpc_method_handler(
                    servicer.getRealsForVip,
                    request_deserializer=katran__pb2.Vip.FromString,
                    response_serializer=katran__pb2.Reals.SerializeToString,
            ),
            'modifyQuicRealsMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.modifyQuicRealsMapping,
                    request_deserializer=katran__pb2.modifiedQuicReals.FromString,
                    response_serializer=katran__pb2.Bool.SerializeToString,
            ),
            'getQuicRealsMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.getQuicRealsMapping,
                    request_deserializer=katran__pb2.Empty.FromString,
                    response_serializer=katran__pb2.QuicReals.SerializeToString,
            ),
            'getStatsForVip': grpc.unary_unary_rpc_method_handler(
                    servicer.getStatsForVip,
                    request_deserializer=katran__pb2.Vip.FromString,
                    response_serializer=katran__pb2.Stats.SerializeToString,
            ),
            'getLruStats': grpc.unary_unary_rpc_method_handler(
                    servicer.getLruStats,
                    request_deserializer=katran__pb2.Empty.FromString,
                    response_serializer=katran__pb2.Stats.SerializeToString,
            ),
            'getLruMissStats': grpc.unary_unary_rpc_method_handler(
                    servicer.getLruMissStats,
                    request_deserializer=katran__pb2.Empty.FromString,
                    response_serializer=katran__pb2.Stats.SerializeToString,
            ),
            'getLruFallbackStats': grpc.unary_unary_rpc_method_handler(
                    servicer.getLruFallbackStats,
                    request_deserializer=katran__pb2.Empty.FromString,
                    response_serializer=katran__pb2.Stats.SerializeToString,
            ),
            'getIcmpTooBigStats': grpc.unary_unary_rpc_method_handler(
                    servicer.getIcmpTooBigStats,
                    request_deserializer=katran__pb2.Empty.FromString,
                    response_serializer=katran__pb2.Stats.SerializeToString,
            ),
            'addHealthcheckerDst': grpc.unary_unary_rpc_method_handler(
                    servicer.addHealthcheckerDst,
                    request_deserializer=katran__pb2.Healthcheck.FromString,
                    response_serializer=katran__pb2.Bool.SerializeToString,
            ),
            'delHealthcheckerDst': grpc.unary_unary_rpc_method_handler(
                    servicer.delHealthcheckerDst,
                    request_deserializer=katran__pb2.Somark.FromString,
                    response_serializer=katran__pb2.Bool.SerializeToString,
            ),
            'getHealthcheckersDst': grpc.unary_unary_rpc_method_handler(
                    servicer.getHealthcheckersDst,
                    request_deserializer=katran__pb2.Empty.FromString,
                    response_serializer=katran__pb2.hcMap.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lb.katran.KatranService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KatranService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def changeMac(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/changeMac',
            katran__pb2.Mac.SerializeToString,
            katran__pb2.Bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMac(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/getMac',
            katran__pb2.Empty.SerializeToString,
            katran__pb2.Mac.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addVip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/addVip',
            katran__pb2.VipMeta.SerializeToString,
            katran__pb2.Bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delVip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/delVip',
            katran__pb2.Vip.SerializeToString,
            katran__pb2.Bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAllVips(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/getAllVips',
            katran__pb2.Empty.SerializeToString,
            katran__pb2.Vips.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def modifyVip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/modifyVip',
            katran__pb2.VipMeta.SerializeToString,
            katran__pb2.Bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def modifyReal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/modifyReal',
            katran__pb2.RealMeta.SerializeToString,
            katran__pb2.Bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getVipFlags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/getVipFlags',
            katran__pb2.Vip.SerializeToString,
            katran__pb2.Flags.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getRealFlags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/getRealFlags',
            katran__pb2.Real.SerializeToString,
            katran__pb2.Flags.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addRealForVip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/addRealForVip',
            katran__pb2.realForVip.SerializeToString,
            katran__pb2.Bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delRealForVip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/delRealForVip',
            katran__pb2.realForVip.SerializeToString,
            katran__pb2.Bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def modifyRealsForVip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/modifyRealsForVip',
            katran__pb2.modifiedRealsForVip.SerializeToString,
            katran__pb2.Bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getRealsForVip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/getRealsForVip',
            katran__pb2.Vip.SerializeToString,
            katran__pb2.Reals.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def modifyQuicRealsMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/modifyQuicRealsMapping',
            katran__pb2.modifiedQuicReals.SerializeToString,
            katran__pb2.Bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getQuicRealsMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/getQuicRealsMapping',
            katran__pb2.Empty.SerializeToString,
            katran__pb2.QuicReals.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getStatsForVip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/getStatsForVip',
            katran__pb2.Vip.SerializeToString,
            katran__pb2.Stats.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getLruStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/getLruStats',
            katran__pb2.Empty.SerializeToString,
            katran__pb2.Stats.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getLruMissStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/getLruMissStats',
            katran__pb2.Empty.SerializeToString,
            katran__pb2.Stats.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getLruFallbackStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/getLruFallbackStats',
            katran__pb2.Empty.SerializeToString,
            katran__pb2.Stats.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getIcmpTooBigStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/getIcmpTooBigStats',
            katran__pb2.Empty.SerializeToString,
            katran__pb2.Stats.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addHealthcheckerDst(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/addHealthcheckerDst',
            katran__pb2.Healthcheck.SerializeToString,
            katran__pb2.Bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delHealthcheckerDst(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/delHealthcheckerDst',
            katran__pb2.Somark.SerializeToString,
            katran__pb2.Bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getHealthcheckersDst(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lb.katran.KatranService/getHealthcheckersDst',
            katran__pb2.Empty.SerializeToString,
            katran__pb2.hcMap.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
